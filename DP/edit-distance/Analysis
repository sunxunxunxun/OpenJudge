对于序列S和T，它们之间距离定义为：对二者其一进行几次以下的操作(1)删去一个字符；(2)插入一个字符；(3)改变一个字符。
每进行一次操作，计数增加1。将S和T变为同一个字符串的最小计数即为它们的距离。给出相应算法。

解法：

　　将S和T的长度分别记为len(S)和len(T)，并把S和T的距离记为m[len(S)][len(T)]，有以下几种情况：

1.如果末尾字符相同，那么m[len(S)][len(T)]=m[len(S)-1][len(T)-1]；

2.如果末尾字符不同，有以下处理方式

　　修改S或T末尾字符使其与另一个一致来完成，m[len(S)][len(T)]=m[len(S)-1][len(T)-1]+1；

　　在S末尾插入T末尾的字符，比较S[1...len(S)]和S[1...len(T)-1]；

　　在T末尾插入S末尾的字符，比较S[1...len(S)-1]和S[1...len(T)]；

　　删除S末尾的字符，比较S[1...len(S)-1]和S[1...len(T)]；

　　删除T末尾的字符，比较S[1...len(S)]和S[1...len(T)-1]；
总结为，对于i>0,j>0的状态(i,j),m[i][j] = min( m[i-1][j-1]+(s[i]==s[j])?0:1 , m[i-1][j]+1, m[i][j-1] +1)。

这里的重叠子结构是S[1...i]，T[1...j]。

https://blog.csdn.net/ac540101928/article/details/52786435
